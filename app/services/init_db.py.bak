from app import db
from ..models import situacao_model, reservatorio_model, motobomba_model, nivel_model, funcao_registrador_model, modbus_model
from datetime import datetime, date, time

def populate_db():
    #tabela tipo_de_reservatorio
    if not reservatorio_model.Tiporeservatorio.query.first():
        tipo_1 = reservatorio_model.Tiporeservatorio(tipo="Reservatório de Distribuição")
        tipo_2 = reservatorio_model.Tiporeservatorio(tipo="Reservatório de Acumulação")
        db.session.add(tipo_1)
        db.session.add(tipo_2)
        db.session.commit()

    #tabela tubos
    tubos_data = [
        {'pol': '1/2"', 'mm': '20 mm'},
        {'pol': '3/4"', 'mm': '25 mm'},
        {'pol': '1"', 'mm': '32 mm'},
        {'pol': '1 1/4"', 'mm': '40 mm'},
        {'pol': '1 1/2"', 'mm': '50 mm'},
        {'pol': '2"', 'mm': '60 mm'},
        {'pol': '2 1/2"', 'mm': '75 mm'},
        {'pol': '3"', 'mm': '85 mm'},
        {'pol': '3 1/2"', 'mm': '0 mm'},
        {'pol': '4"', 'mm': '110 mm'},
        {'pol': '5"', 'mm': '127 mm'},
        {'pol': '6"', 'mm': '150 mm'},
        {'pol': '8"', 'mm': '200 mm'},
        {'pol': '10"', 'mm': '254 mm'},
        {'pol': '12"', 'mm': '304 mm'},
    ]

    for data in tubos_data:
        existing_tubo = motobomba_model.Tubospvc.query.filter_by(pol=data['pol']).first()
        if not existing_tubo:
            new_tubo = motobomba_model.Tubospvc(pol=data['pol'], mm=data['mm'])
            db.session.add(new_tubo)
    db.session.commit()

    #tabela funcao_registrador
    funcoes = [
        "Nível", "Tensão", "Corrente", "Potência", 
        "Acionamento (Liga/Desliga)", "Status", "Análise Espectral de Fluxo", "Consumo"
    ]
    funcoes_map = {}
    for f_nome in funcoes:
        funcao_obj = funcao_registrador_model.FuncaoRegistrador.query.filter_by(funcao=f_nome).first()
        if not funcao_obj:
            funcao_obj = funcao_registrador_model.FuncaoRegistrador(funcao=f_nome)
            db.session.add(funcao_obj)
        funcoes_map[f_nome] = funcao_obj
    db.session.commit()

    # Configurar Escravos e Registradores Modbus Padrão
    slaves_config = {
        1: {"nome": "Motobomba Principal", "associar_a": ("motobomba", "Bomba Principal")},
        2: {"nome": "Reservatório de Acumulação", "associar_a": ("reservatorio", "Reservatório Secundário")},
        3: {"nome": "Reservatório de Distribuição", "associar_a": ("reservatorio", "Reservatório Principal")}
    }
    registers_config = [
        # Bomba
        {"slave_id": 1, "endereco": 0, "tipo": "coil", "funcao": "Acionamento (Liga/Desliga)", "acesso": "Read/Write", "tamanho": "1 bit"},
        {"slave_id": 1, "endereco": 100, "tipo": "holding_register", "funcao": "Tensão", "acesso": "Read-Only", "tamanho": "16 bits"},
        {"slave_id": 1, "endereco": 101, "tipo": "holding_register", "funcao": "Corrente", "acesso": "Read-Only", "tamanho": "16 bits"},
        {"slave_id": 1, "endereco": 105, "tipo": "holding_register", "funcao": "Consumo", "acesso": "Read-Only", "tamanho": "16 bits"},
        # Reservatórios
        {"slave_id": 2, "endereco": 100, "tipo": "holding_register", "funcao": "Nível", "acesso": "Read/Write", "tamanho": "16 bits"},
        {"slave_id": 3, "endereco": 100, "tipo": "holding_register", "funcao": "Nível", "acesso": "Read/Write", "tamanho": "16 bits"},
    ]

    for slave_id, config in slaves_config.items():
        slave = modbus_model.ModbusSlave.query.filter_by(slave_id=slave_id).first()
        if not slave:
            slave = modbus_model.ModbusSlave(nome=config["nome"], slave_id=slave_id)
            db.session.add(slave)
            db.session.commit()

        # Associar ao equipamento
        tipo_equip, nome_equip = config["associar_a"]
        if tipo_equip == "motobomba":
            pump = motobomba_model.Motobomba.query.filter_by(nome=nome_equip).first()
            if pump and pump.modbus_slave_id is None:
                pump.modbus_slave_id = slave.id
        elif tipo_equip == "reservatorio":
            tank = reservatorio_model.Reservatorio.query.filter_by(nome=nome_equip).first()
            if tank and tank.modbus_slave_id is None:
                tank.modbus_slave_id = slave.id
    db.session.commit()

    for reg_config in registers_config:
        slave = modbus_model.ModbusSlave.query.filter_by(slave_id=reg_config["slave_id"]).first()
        if not slave: continue

        funcao_obj = funcoes_map.get(reg_config["funcao"])
        if not funcao_obj: continue

        # Procura por um registrador para esta FUNÇÃO e ESCRAVO
        reg = modbus_model.ModbusRegister.query.filter_by(
            slave_id=slave.id,
            funcao_id=funcao_obj.id
        ).first()

        if reg:
            # Se existe, verifica se os dados estão corretos e atualiza se necessário
            if reg.endereco != reg_config["endereco"] or reg.tipo != reg_config["tipo"]:
                print(f'Corrigindo registrador para função "{funcao_obj.funcao}" no escravo {slave.slave_id}...')
                reg.endereco = reg_config["endereco"]
                reg.tipo = reg_config["tipo"]
                reg.acesso = reg_config["acesso"]
                reg.tamanho = reg_config["tamanho"]
        else:
            # Se não existe, cria um novo
            print(f'Criando novo registrador para função "{funcao_obj.funcao}" no escravo {slave.slave_id}...')
            new_reg = modbus_model.ModbusRegister(
                slave_id=slave.id,
                funcao_id=funcao_obj.id,
                endereco=reg_config["endereco"],
                tipo=reg_config["tipo"],
                acesso=reg_config["acesso"],
                tamanho=reg_config["tamanho"],
                descricao=f'{reg_config["funcao"]} do {slave.nome}'
            )
            db.session.add(new_reg)
    db.session.commit()


    #tabela situacao
    if not situacao_model.Situacao.query.first():
        # Status de ciclo
        sit_ciclo_iniciado = situacao_model.Situacao(situacao="Ciclo iniciado")
        sit_ciclo_finalizado = situacao_model.Situacao(situacao="Ciclo finalizado")
        sit_ciclo_interrompido = situacao_model.Situacao(situacao="Ciclo interrompido")

        # Status de eventos e falhas
        sit_funcionando = situacao_model.Situacao(situacao="Funcionando")
        sit_subtensao = situacao_model.Situacao(situacao="Subtensão")
        sit_sobretensao = situacao_model.Situacao(situacao="Sobretensão")
        sit_falta_energia = situacao_model.Situacao(situacao="Falta de energia eletrica")
        sit_nivel_minimo = situacao_model.Situacao(situacao="Reservatório inferior abaixo do nível mínimo")
        sit_nivel_maximo = situacao_model.Situacao(situacao="Reservatório superior cheio")
        sit_entrada_ar = situacao_model.Situacao(situacao="Entrada de ar")

        db.session.add_all([
            sit_ciclo_iniciado, sit_ciclo_finalizado, sit_ciclo_interrompido,
            sit_funcionando, sit_subtensao, sit_sobretensao, sit_falta_energia,
            sit_nivel_minimo, sit_nivel_maximo, sit_entrada_ar
        ])
        db.session.commit()

    # Adicionar reservatórios de exemplo e níveis
    if not reservatorio_model.Reservatorio.query.first(): # Restaurado a condição de idempotência
        tipo_superior = reservatorio_model.Tiporeservatorio.query.filter_by(tipo="Superior").first()
        tipo_inferior = reservatorio_model.Tiporeservatorio.query.filter_by(tipo="Inferior").first()

        if tipo_superior and tipo_inferior:
            res_1 = reservatorio_model.Reservatorio(nome="Reservatório Principal", descricao="Reservatório de água potável principal", capacidade_maxima=11000.0, tipos=tipo_superior)
            res_2 = reservatorio_model.Reservatorio(nome="Reservatório Secundário", descricao="Reservatório de água de reuso", capacidade_maxima=1000.0, tipos=tipo_inferior)
            db.session.add(res_1)
            db.session.add(res_2)
            db.session.commit()

            print(f"DEBUG: Reservatório 1 ID: {res_1.id}, Nome: {res_1.nome}")
            print(f"DEBUG: Reservatório 2 ID: {res_2.id}, Nome: {res_2.nome}")

            # Adicionar níveis de exemplo para o Reservatório Principal
            if not nivel_model.Nivel.query.filter_by(reservatorio=res_1).first(): # Restaurado a condição de idempotência
                niveis_res1 = [
                    nivel_model.Nivel(valor=1000, data=date(2025, 10, 1), hora=time(8, 0, 0), reservatorio=res_1),
                    nivel_model.Nivel(valor=1500, data=date(2025, 10, 1), hora=time(10, 0, 0), reservatorio=res_1),
                    nivel_model.Nivel(valor=2000, data=date(2025, 10, 1), hora=time(12, 0, 0), reservatorio=res_1),
                    nivel_model.Nivel(valor=2500, data=date(2025, 10, 1), hora=time(14, 0, 0), reservatorio=res_1),
                    nivel_model.Nivel(valor=3000, data=date(2025, 10, 1), hora=time(16, 0, 0), reservatorio=res_1),
                ]
                db.session.add_all(niveis_res1)
                db.session.commit()
                print(f"DEBUG: Inseridos {len(niveis_res1)} níveis para o Reservatório Principal.")

            # Adicionar níveis de exemplo para o Reservatório Secundário
            if not nivel_model.Nivel.query.filter_by(reservatorio=res_2).first(): # Restaurado a condição de idempotência
                niveis_res2 = [
                    nivel_model.Nivel(valor=300, data=date(2025, 10, 1), hora=time(9, 0, 0), reservatorio=res_2),
                    nivel_model.Nivel(valor=500, data=date(2025, 10, 1), hora=time(11, 0, 0), reservatorio=res_2),
                    nivel_model.Nivel(valor=600, data=date(2025, 10, 1), hora=time(13, 0, 0), reservatorio=res_2),
                    nivel_model.Nivel(valor=800, data=date(2025, 10, 1), hora=time(15, 0, 0), reservatorio=res_2),
                    nivel_model.Nivel(valor=900, data=date(2025, 10, 1), hora=time(17, 0, 0), reservatorio=res_2),
                ]
                db.session.add_all(niveis_res2)
                db.session.commit()
                print(f"DEBUG: Inseridos {len(niveis_res2)} níveis para o Reservatório Secundário.")
