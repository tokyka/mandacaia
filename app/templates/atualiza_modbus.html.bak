{% extends 'base.html' %}
{% block conteudo %}
<style>
    :root {
        --primary-blue: #0066cc;
        --secondary-cyan: #17a2b8;
        --accent-teal: #20c997;
    }

    .page-header {
        background: linear-gradient(135deg, #e3f2fd 0%, #b3e5fc 50%, #81d4fa 100%);
        padding: 2.5rem 0;
        margin-bottom: 2rem;
        border-radius: 0 0 20px 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .page-title {
        background: linear-gradient(135deg, var(--primary-blue), var(--secondary-cyan), var(--accent-teal));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: 800;
        font-size: 2.5rem;
        margin: 0;
    }

    .subtitle {
        color: #2c3e50;
        font-size: 1.2rem;
        font-weight: 600;
        margin-top: 0.5rem;
    }

    .form-card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
    }

    .form-card-header {
        background: linear-gradient(90deg, var(--primary-blue) 0%, var(--secondary-cyan) 60%, var(--accent-teal) 100%);
        color: white;
        padding: 1.5rem;
        font-weight: 600;
        font-size: 1.2rem;
    }

    .form-card-body {
        padding: 2rem;
    }

    .form-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .form-control, .form-select {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 0.75rem;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--secondary-cyan);
        box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.15);
    }

    .section-title {
        background: linear-gradient(90deg, var(--primary-blue), var(--secondary-cyan));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: 700;
        font-size: 1.5rem;
        margin: 2rem 0 1rem 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .table-registradores {
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .table-registradores thead {
        background: linear-gradient(90deg, #f8f9fa 0%, #e9ecef 100%);
    }

    .table-registradores thead th {
        color: #2c3e50;
        font-weight: 700;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.5px;
        padding: 1rem;
        border-bottom: 3px solid var(--primary-blue);
    }

    .table-registradores tbody tr {
        transition: all 0.3s ease;
    }

    .table-registradores tbody tr:hover {
        background: linear-gradient(90deg, #f0f9ff 0%, #e0f2fe 100%);
    }

    .table-registradores tbody td {
        padding: 0.75rem;
        vertical-align: middle;
    }

    .btn-add-register {
        background: linear-gradient(135deg, var(--secondary-cyan), var(--accent-teal));
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-add-register:hover {
        background: linear-gradient(135deg, var(--accent-teal), var(--secondary-cyan));
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(23, 162, 184, 0.3);
    }

    .btn-remove-register {
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
        border: none;
        padding: 0.4rem 0.8rem;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-remove-register:hover {
        background: linear-gradient(135deg, #c82333, #bd2130);
        color: white;
        transform: scale(1.05);
        box-shadow: 0 3px 6px rgba(220, 53, 69, 0.3);
    }

    .btn-submit {
        background: linear-gradient(135deg, var(--primary-blue), var(--secondary-cyan));
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-submit:hover {
        background: linear-gradient(135deg, var(--secondary-cyan), var(--accent-teal));
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 102, 204, 0.3);
    }

    .btn-cancel {
        background: #6c757d;
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-cancel:hover {
        background: #5a6268;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 2px solid #e9ecef;
    }

    .info-badge {
        background: linear-gradient(135deg, #fff3cd, #ffe69c);
        color: #856404;
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        border-left: 4px solid #ffc107;
    }
</style>

<div class="page-header">
    <div class="container">
        <div class="d-flex align-items-center justify-content-center flex-column">
            <div class="d-flex align-items-center">
                <i class="bi bi-pencil-square me-3" style="font-size: 2.5rem; color: var(--primary-blue);"></i>
                <h2 class="page-title">Atualizar Escravo Modbus</h2>
            </div>
            <p class="subtitle">{{ slave.nome }}</p>
        </div>
    </div>
</div>

<div class="container mb-5">
    <div class="card form-card">
        <div class="card-header form-card-header">
            <i class="bi bi-hdd-network-fill me-2"></i>Gerenciar Dispositivo Modbus
        </div>
        <div class="card-body form-card-body">
            <form method="post" id="modbusSlaveForm">
                {{ form.csrf_token }}

                <div class="info-badge">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <strong>Atenção:</strong> Altere os dados do escravo Modbus e seus registradores conforme necessário.
                </div>

                <div class="mb-4">
                    {{ form.nome.label(class="form-label") }}
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-tag-fill"></i></span>
                        {{ form.nome(class="form-control", placeholder="Ex: Sensor de Nível 01") }}
                    </div>
                </div>

                <div class="mb-4">
                    {{ form.slave_id.label(class="form-label") }}
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-hash"></i></span>
                        {{ form.slave_id(class="form-control", placeholder="Ex: 1") }}
                    </div>
                </div>

                <h3 class="section-title">
                    <i class="bi bi-list-ul"></i>
                    Registradores
                </h3>

                <div class="table-responsive">
                    <table class="table table-registradores table-bordered mb-3" id="registradoresTable">
                        <thead>
                            <tr>
                                <th style="width: 20%;"><i class="bi bi-pin-angle me-1"></i>Endereço</th>
                                <th style="width: 20%;"><i class="bi bi-diagram-3 me-1"></i>Tipo</th>
                                <th style="width: 25%;"><i class="bi bi-joystick me-1"></i>Função</th>
                                <th style="width: 25%;"><i class="bi bi-file-text me-1"></i>Descrição (Opcional)</th>
                                <th style="width: 10%;" class="text-center"><i class="bi bi-gear me-1"></i>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Registradores serão adicionados aqui via JavaScript -->
                        </tbody>
                    </table>
                </div>

                <button type="button" class="btn btn-add-register mb-3" id="addRegistrador">
                    <i class="bi bi-plus-circle me-2"></i>Adicionar Registrador
                </button>

                <input type="hidden" name="registradores_json" id="registradoresJson">

                <div class="action-buttons">
                    <a href="{{ url_for('lista_modbus') }}" class="btn btn-cancel">
                        <i class="bi bi-x-circle me-2"></i>Cancelar
                    </a>
                    {{ form.submit(class="btn btn-submit") }}
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Variáveis globais para os dados
    let registradores = [];
    const funcoes = JSON.parse('{{ funcoes | tojson | safe }}');

    // Gera as opções do select de Funções
    function getFuncoesOptions(selectedFuncaoId) {
        let options = '<option value="" disabled selected>Selecione...</option>';
        funcoes.forEach(funcao => {
            options += `<option value="${funcao.id}" ${funcao.id === selectedFuncaoId ? 'selected' : ''}>${funcao.funcao}</option>`;
        });
        return options;
    }

    // Renderiza a tabela de registradores
    function renderRegistradores() {
        const registradoresTableBody = document.querySelector('#registradoresTable tbody');
        registradoresTableBody.innerHTML = '';

        if (registradores.length === 0) {
            registradoresTableBody.innerHTML = `
                <tr>
                    <td colspan="5" class="text-center text-muted py-4">
                        <i class="bi bi-inbox" style="font-size: 2rem; display: block; margin-bottom: 0.5rem;"></i>
                        Nenhum registrador adicionado. Clique em "Adicionar Registrador" para começar.
                    </td>
                </tr>
            `;
            return;
        }

        registradores.forEach((reg, index) => {
            const row = registradoresTableBody.insertRow();
            row.innerHTML = `
                <td><input type="number" class="form-control" value="${reg.endereco}" onchange="updateRegistrador(${index}, 'endereco', this.value)" required placeholder="0"></td>
                <td>
                    <select class="form-select" onchange="updateRegistrador(${index}, 'tipo', this.value)">
                        <option value="coil" ${reg.tipo === 'coil' ? 'selected' : ''}>Coil</option>
                        <option value="holding_register" ${reg.tipo === 'holding_register' ? 'selected' : ''}>Holding Register</option>
                    </select>
                </td>
                <td>
                    <select class="form-select" onchange="updateRegistrador(${index}, 'funcao_id', this.value)" required>
                        ${getFuncoesOptions(reg.funcao_id)}
                    </select>
                </td>
                <td><input type="text" class="form-control" value="${reg.descricao || ''}" onchange="updateRegistrador(${index}, 'descricao', this.value)" placeholder="Anotações..."></td>
                <td class="text-center">
                    <button type="button" class="btn btn-remove-register btn-sm" onclick="removeRegistrador(${index})" title="Remover registrador">
                        <i class="bi bi-trash-fill"></i>
                    </button>
                </td>
            `;
        });
    }

    // Atualiza o array de registradores com base na interação do usuário
    function updateRegistrador(index, field, value) {
        if (field === 'endereco' || field === 'funcao_id') {
            registradores[index][field] = parseInt(value) || null;
        } else {
            registradores[index][field] = value;
        }
    }

    // Remove um registrador do array
    function removeRegistrador(index) {
        if (confirm('Tem certeza que deseja remover este registrador?')) {
            registradores.splice(index, 1);
            renderRegistradores();
        }
    }

    // Adiciona uma nova linha de registrador
    function addRegistradorRow() {
        registradores.push({
            endereco: 0,
            tipo: 'holding_register',
            funcao_id: funcoes.length > 0 ? funcoes[0].id : null, // Padrão para a primeira função
            descricao: ''
        });
        renderRegistradores();
    }

    // Event Listeners
    document.addEventListener('DOMContentLoaded', function() {
        const addRegistradorBtn = document.getElementById('addRegistrador');
        const modbusSlaveForm = document.getElementById('modbusSlaveForm');
        const registradoresJsonInput = document.getElementById('registradoresJson');

        // Carregar registradores existentes (passados pela view)
        {% if registradores_existentes %}
            registradores = JSON.parse('{{ registradores_existentes | tojson | safe }}');
        {% endif %}

        addRegistradorBtn.addEventListener('click', addRegistradorRow);

        // Antes de submeter, valida e serializa os dados dos registradores
        modbusSlaveForm.addEventListener('submit', function(event) {
            for (const reg of registradores) {
                if (reg.endereco === '' || reg.endereco === null || isNaN(reg.endereco) || reg.endereco < 0) {
                    alert('O endereço do registrador é inválido.');
                    event.preventDefault();
                    return;
                }
                if (!reg.funcao_id) {
                    alert('Todos os registradores devem ter uma função selecionada.');
                    event.preventDefault();
                    return;
                }
            }
            registradoresJsonInput.value = JSON.stringify(registradores);
        });

        // Renderização inicial
        renderRegistradores();
    });
</script>
{% endblock conteudo %}
