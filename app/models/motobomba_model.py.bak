from app import db
from flask_wtf import FlaskForm
from wtforms import StringField, SelectField, SubmitField
from wtforms.validators import DataRequired, Length
from enum import Enum # Importar Enum

# Definir o Enum para as tensões de trabalho
class TensaoTrabalho(Enum):
    V110 = "110 V"
    V220 = "220 V"
    V380 = "380 V"
    V440 = "440 V"

class Motobomba(db.Model):
    __tablename__ = "motobomba"
    id = db.Column(db.Integer, primary_key=True, autoincrement=True, nullable=False)
    nome = db.Column(db.String(10), nullable=False, unique=True)
    descricao = db.Column(db.String(100), nullable=False)
    modelo = db.Column(db.String(30), nullable=False)
    fabricante = db.Column(db.String(30), nullable=False)
    potencia = db.Column(db.String(10), nullable=False)
    succao_id = db.Column(db.SmallInteger, db.ForeignKey("tubos.id"), nullable=False)
    succao = db.relationship("Tubospvc", foreign_keys="[Motobomba.succao_id]", backref="motobombas_succao")
    recalque_id = db.Column(db.SmallInteger, db.ForeignKey("tubos.id"), nullable=False)
    recalque = db.relationship("Tubospvc", foreign_keys="[Motobomba.recalque_id]", backref="motobombas_recalque")
    tensao_de_trabalho = db.Column(db.Enum(TensaoTrabalho), nullable=False)

    # Relacionamento com ModbusSlave
    modbus_slave_id = db.Column(db.Integer, db.ForeignKey('modbus_slave.id'), nullable=True)
    modbus_slave = db.relationship('ModbusSlave', backref='motobombas')

    # Relacionamentos com Reservatorios (fonte e destino)
    reservatorio_fonte_id = db.Column(db.Integer, db.ForeignKey('reservatorio.id'), nullable=True)
    reservatorio_destino_id = db.Column(db.Integer, db.ForeignKey('reservatorio.id'), nullable=True)
    reservatorio_fonte = db.relationship('Reservatorio', foreign_keys=[reservatorio_fonte_id], backref='bombas_fonte')
    reservatorio_destino = db.relationship('Reservatorio', foreign_keys=[reservatorio_destino_id], backref='bombas_destino')

    def __init__(self, nome, descricao, modelo, fabricante, potencia, succao, recalque, tensao_de_trabalho, modbus_slave_id=None, reservatorio_fonte_id=None, reservatorio_destino_id=None):
        self.nome = nome
        self.descricao = descricao
        self.modelo = modelo
        self.fabricante = fabricante
        self.potencia = potencia
        self.succao = succao
        self.recalque = recalque
        self.modbus_slave_id = modbus_slave_id
        self.reservatorio_fonte_id = reservatorio_fonte_id
        self.reservatorio_destino_id = reservatorio_destino_id
        
        if isinstance(tensao_de_trabalho, str):
            self.tensao_de_trabalho = TensaoTrabalho(tensao_de_trabalho)
        else:
            self.tensao_de_trabalho = tensao_de_trabalho


class Tubospvc(db.Model):
    __tablename__ = "tubos"
    id = db.Column(db.SmallInteger, primary_key=True, autoincrement=True, nullable=False)
    pol = db.Column(db.String(10), nullable=False)
    mm = db.Column(db.String(10), nullable=False)

    def __init__(self, pol, mm):
        self.pol = pol
        self.mm = mm

class MotobombaForm(FlaskForm):
    nome = StringField('Nome', validators=[DataRequired(), Length(min=2, max=10)])
    descricao = StringField('Descrição', validators=[DataRequired(), Length(min=5, max=100)])
    modelo = StringField('Modelo', validators=[DataRequired(), Length(min=2, max=30)])
    fabricante = StringField('Fabricante', validators=[DataRequired(), Length(min=2, max=30)])
    potencia = StringField('Potência', validators=[DataRequired(), Length(min=2, max=10)])
    succao = SelectField('Sucção (pol)', validators=[DataRequired()]) # Removido coerce=int
    recalque = SelectField('Recalque (pol)', validators=[DataRequired()]) # Removido coerce=int
    # Usar as opções do Enum para o SelectField
    tensao_de_trabalho = SelectField('Tensão de Trabalho', choices=[(choice.value, choice.value) for choice in TensaoTrabalho], validators=[DataRequired()])
    submit = SubmitField('Salvar')
