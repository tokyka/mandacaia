üéØ OBJETIVO

Permitir que o usu√°rio configure:
- Dispositivos (slaves Modbus);
- Condi√ß√µes (baseadas em n√≠veis, tens√£o, corrente, etc.);
- A√ß√µes (ligar/desligar bombas, enviar alarmes, etc.);
- L√≥gicas compostas (condi√ß√µes e a√ß√µes encadeadas).

Tudo isso de forma parametriz√°vel via interface web, sem editar o c√≥digo-fonte.

---

üß© ARQUITETURA GERAL

A aplica√ß√£o ser√° dividida em 4 camadas principais:

1. Camada de Comunica√ß√£o Modbus
   - Respons√°vel por ler e escrever valores dos registradores Modbus (input, holding, coil, discrete input).
   - Funciona de forma gen√©rica, com base nas configura√ß√µes de banco de dados (sem hardcode).

2. Camada de Configura√ß√£o Din√¢mica
   - Define via banco de dados todos os slaves, registradores, condi√ß√µes e a√ß√µes.

3. Motor de Regras (Rule Engine)
   - Executa periodicamente (ex: a cada 1 segundo).
   - Avalia as condi√ß√µes e dispara a√ß√µes de acordo com as regras configuradas.

4. Interface Web
   - Permite ao usu√°rio:
     - Cadastrar dispositivos Modbus;
     - Mapear registradores;
     - Criar condi√ß√µes (compara√ß√µes);
     - Definir a√ß√µes;
     - Criar regras com "SE ... ENT√ÉO ..." de forma visual/intuitiva.

---

üß† FLUXO L√ìGICO DE OPERA√á√ÉO

1. A thread principal percorre a tabela de slaves configurados.
2. L√™ os valores definidos nos registradores de entrada.
3. Atualiza os valores atuais no banco de dados.
4. O motor de regras analisa as condi√ß√µes:
   - Exemplo: ‚Äúreservat√≥rio acumula√ß√£o n√≠vel > 20%‚Äù e ‚Äúreservat√≥rio distribui√ß√£o ‚â§ 20%‚Äù.
5. Se a condi√ß√£o for verdadeira, executa a a√ß√£o associada:
   - Exemplo: ‚ÄúLigar motobomba 1‚Äù.
6. A a√ß√£o √© traduzida em comando Modbus para o slave correspondente.
7. O sistema registra logs e continua o ciclo.

---

üóÑÔ∏è ESTRUTURA DE BANCO DE DADOS

1. devices ‚Äì Dispositivos Modbus
----------------------------------
| Campo | Tipo | Descri√ß√£o |
|-------|------|------------|
| id | INT (PK) | Identificador do dispositivo |
| name | VARCHAR | Nome (ex: "Reservat√≥rio Acumula√ß√£o") |
| ip_address | VARCHAR | Endere√ßo IP Modbus TCP ou serial ID |
| slave_id | INT | ID do slave Modbus |
| type | ENUM('reservatorio','bomba','sensor','outro') | Tipo do dispositivo |
| ativo | BOOLEAN | Se est√° ativo no sistema |

2. registers ‚Äì Registradores Modbus
-----------------------------------
| Campo | Tipo | Descri√ß√£o |
|-------|------|------------|
| id | INT (PK) | Identificador |
| device_id | INT (FK ‚Üí devices.id) | Dispositivo associado |
| name | VARCHAR | Nome (ex: "N√≠vel (%)", "Tens√£o (V)") |
| function_code | INT | C√≥digo Modbus (1, 2, 3, 4) |
| address | INT | Endere√ßo do registrador |
| data_type | ENUM('int','float','bool') | Tipo de dado |
| scale | FLOAT | Fator de escala (ex: 0.1, 1.0) |
| rw | ENUM('R','W') | Leitura/Escrita |
| last_value | FLOAT | √öltimo valor lido (atualizado automaticamente) |

3. conditions ‚Äì Condi√ß√µes L√≥gicas
---------------------------------
| Campo | Tipo | Descri√ß√£o |
|-------|------|------------|
| id | INT (PK) | Identificador |
| name | VARCHAR | Nome da condi√ß√£o |
| left_register_id | INT (FK ‚Üí registers.id) | Registrador a comparar |
| operator | ENUM('>','<','>=','<=','==','!=') | Operador l√≥gico |
| right_value | FLOAT | Valor de compara√ß√£o ou ID de outro registrador |
| right_is_register | BOOLEAN | Se o valor √† direita vem de outro registrador |
| description | TEXT | Descri√ß√£o opcional |

Exemplo:
> Se ‚Äúreservat√≥rio distribui√ß√£o n√≠vel (%) <= 20%‚Äù.

4. actions ‚Äì A√ß√µes a Executar
-----------------------------
| Campo | Tipo | Descri√ß√£o |
|-------|------|------------|
| id | INT (PK) | Identificador |
| name | VARCHAR | Nome da a√ß√£o |
| target_register_id | INT (FK ‚Üí registers.id) | Registrador Modbus a escrever |
| write_value | FLOAT | Valor a escrever (ex: 1 = ligar, 0 = desligar) |
| description | TEXT | Descri√ß√£o opcional |

Exemplo:
> ‚ÄúLigar bomba 1‚Äù = escrever 1 no registrador coil da bomba.

5. rules ‚Äì Regras Completas
----------------------------
| Campo | Tipo | Descri√ß√£o |
|-------|------|------------|
| id | INT (PK) | Identificador |
| name | VARCHAR | Nome da regra |
| condition_id | INT (FK ‚Üí conditions.id) | Condi√ß√£o associada |
| action_id | INT (FK ‚Üí actions.id) | A√ß√£o associada |
| priority | INT | Prioridade (para resolver conflitos) |
| enabled | BOOLEAN | Ativo/inativo |
| stop_on_trigger | BOOLEAN | Se deve parar ap√≥s acionar uma vez (ex: histerese) |

Exemplo:
> ‚ÄúSE n√≠vel acumula√ß√£o > 20% E n√≠vel distribui√ß√£o ‚â§ 20% ENT√ÉO ligar bomba 1.‚Äù

6. rule_logs ‚Äì Hist√≥rico de Execu√ß√£o
------------------------------------
| Campo | Tipo | Descri√ß√£o |
|-------|------|------------|
| id | INT (PK) | Identificador |
| rule_id | INT (FK ‚Üí rules.id) | Regra executada |
| timestamp | DATETIME | Data/hora da execu√ß√£o |
| condition_result | BOOLEAN | Resultado da condi√ß√£o |
| action_executed | BOOLEAN | Se a a√ß√£o foi disparada |

---

‚öôÔ∏è MOTOR DE REGRAS (RULE ENGINE)

- Executa ciclicamente (por ex. a cada 500 ms).
- Para cada rule ativa:
  1. Avalia a condition.
  2. Se verdadeira, aciona a action.
  3. Registra log (rule_logs).
- Implementa histerese para evitar liga/desliga r√°pido.
- Possibilidade de grupos de regras (revezamento de bombas).

---

üåê INTERFACE WEB (SUGEST√ÉO DE FUNCIONALIDADE)

- P√°gina ‚ÄúDispositivos‚Äù:
  - Cadastrar e editar slaves Modbus.
  - Adicionar registradores (endere√ßos e tipos).

- P√°gina ‚ÄúRegras‚Äù (editor visual):
  - Exemplo de regra:
    [Reservat√≥rio Acumula√ß√£o: N√≠vel %] > [20]
    E
    [Reservat√≥rio Distribui√ß√£o: N√≠vel %] <= [20]
    ENT√ÉO
    [Bomba 1: Liga]

- P√°gina ‚ÄúMonitoramento‚Äù:
  - Exibe n√≠veis em tempo real.
  - Mostra status das bombas.
  - Logs das √∫ltimas a√ß√µes.

---

üß∞ VANTAGENS DA ARQUITETURA PROPOSTA

‚úÖ Totalmente configur√°vel via banco e interface  
‚úÖ Permite adicionar novos slaves, sensores e bombas sem alterar c√≥digo  
‚úÖ Escal√°vel ‚Äî suporta m√∫ltiplos reservat√≥rios e bombas  
‚úÖ Base para futura automa√ß√£o avan√ßada (regras compostas, scripts, etc.)  
‚úÖ Ideal para ser distribu√≠do (v√°rios n√≥s lendo Modbus e um servidor central processando)
